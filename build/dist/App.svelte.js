import './App.svelte.css.proxy.js';
/* src\App.svelte generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	globals,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

const { window: window_1 } = globals;
import Me from "./Me.svelte.js";
import PageHeader from "./PageHeader.svelte.js";
import FirstImage from "./FirstImage.svelte.js";
import { firstPageHeader } from "./stores.js";
import { setContext } from "../_snowpack/pkg/svelte.js";
import Projects from "./Projects.svelte.js";
import Reach from "./Reach.svelte.js";

function create_fragment(ctx) {
	let div1;
	let pageheader;
	let t0;
	let div0;
	let firstimage;
	let t1;
	let projects;
	let t2;
	let reach;
	let current;
	let mounted;
	let dispose;
	pageheader = new PageHeader({});
	firstimage = new FirstImage({});
	projects = new Projects({});
	reach = new Reach({});

	return {
		c() {
			div1 = element("div");
			create_component(pageheader.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(firstimage.$$.fragment);
			t1 = space();
			create_component(projects.$$.fragment);
			t2 = space();
			create_component(reach.$$.fragment);
			attr(div0, "id", "stack");
			attr(div0, "class", "svelte-2ovlvx");
			attr(div1, "class", "svelte-2ovlvx");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(pageheader, div1, null);
			append(div1, t0);
			append(div1, div0);
			mount_component(firstimage, div0, null);
			append(div0, t1);
			mount_component(projects, div0, null);
			append(div0, t2);
			mount_component(reach, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(window_1, "wheel", /*scrollHandler*/ ctx[0], { passive: false });
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(pageheader.$$.fragment, local);
			transition_in(firstimage.$$.fragment, local);
			transition_in(projects.$$.fragment, local);
			transition_in(reach.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pageheader.$$.fragment, local);
			transition_out(firstimage.$$.fragment, local);
			transition_out(projects.$$.fragment, local);
			transition_out(reach.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(pageheader);
			destroy_component(firstimage);
			destroy_component(projects);
			destroy_component(reach);
			mounted = false;
			dispose();
		}
	};
}

function getCurrentSlideIndex() {
	return Math.floor(window.scrollY / window.innerHeight);
}

function instance($$self, $$props, $$invalidate) {
	let scrollBuffer = true;

	function scrollHandler(e) {
		e.preventDefault();
		if (!scrollBuffer) return;
		scrollToSlide(e.deltaY > 0 ? 1 : -1, true);
		scrollBuffer = false;

		setTimeout(
			() => {
				scrollBuffer = true;
			},
			300
		);
	}

	function scrollToSlide(index = 0, relative = false) {
		if (relative) {
			firstPageHeader.set(getCurrentSlideIndex() + index > 0);

			window.scroll({
				top: window.innerHeight * (getCurrentSlideIndex() + index),
				behavior: "smooth"
			});
		} else {
			firstPageHeader.set(index > 0);

			window.scroll({
				top: window.innerHeight * index,
				behavior: "smooth"
			});
		}
	}

	setContext("scroller", { scrollToSlide });
	return [scrollHandler, scrollToSlide];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { scrollToSlide: 1 });
	}

	get scrollToSlide() {
		return this.$$.ctx[1];
	}
}

export default App;